#!/bin/bash
# exit if any command failed
set -e

usage="$(basename "$0") [-h] -c title -n num -s <a|n> -l <cpp|go...>  -- create template for competition
    Each competition will be populate with:
        - [a-b].<language extensions inside a folder name <title>
        - [a-b]_input.txt file
        - [a-b]_output.txt file
        - Makefile a make file to compile/run test cases for each input:
            + Type: make <task-name> to run test cases from <task-name>_input.txt for that task
where:
    -h  show this help text
    -c  Title of the contest, used as folder name
    -n  the number of tasks for this competition
    -s  The naming scheme of task ( alphabetical | numerical )
    -l  Language to use in the competition, limited support only
"


TASK_COUNT=5
SUPPORTED_LANGUAGE=( $(ls -l "template/" | grep '^d' | awk '{ print $9 }') )

# echo "${SUPPORTED_LANGUAGE[@]}"


function check_supported_lang() {

    local in=1
    for lang in "${SUPPORTED_LANGUAGE[@]}"
    do
        if [ "$LANGUAGE" == "$lang" ]; then
            in=0
        fi
    done

    if [ "$in" -eq "1" ]; then
        printf "Unsupported language -%s, must be one of -%s\n" "$LANGUAGE" "$SUPPORTED_LANGUAGE" >&2
        echo "$usage" >&2
        exit 1
    fi

    if [ $SCHEME != 'a' ] && [ $SCHEME != 'n' ]; then
        SCHEME=n # default to numerical schema
    fi

    if [[ -z "$CONTEST"  || "$CONTEST" == "template" ]]; then
        printf "Invalid contest name %s\n" "$CONTEST" >&2
        echo "$usage" >&2
        exit 1
    fi

    if ! ((  $NUM > 0 )); then
        printf "Invalid task number -%s\n" "$NUM" >&2
        echo "$usage" >&2
        exit 1
    fi


}

while getopts ':hc:n:s:l:' option; do
  case "$option" in

    h  )
        echo "$usage"
        exit 0
        ;;

    c  )
        CONTEST=$OPTARG
        ;;

    n  )
        NUM=$OPTARG
        ;;

    s  )
        SCHEME=$OPTARG
        ;;

    l  )
        LANGUAGE=$OPTARG
        ;;

    :  ) printf "missing argument for -%s\n" "$OPTARG" >&2; echo "$usage" >&2; exit 1 ;;

    \? ) printf "Invalid option: -$option requires an argument\n" >&2; echo "$usage" >&2; exit 1 ;;

    *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
  esac
done

if ((OPTIND == 1)); then printf "No options specified\n\n"; echo "$usage" >&2; exit 1; fi


shift $((OPTIND - 1))

check_supported_lang

echo "1. Creating directory $CONTEST"
mkdir "$CONTEST"

echo "Done"

echo "2. Populating template for $LANGUAGE"

for ((i=1; i < NUM ; i++)); do
    name="$i"
    if [ $SCHEME == "a" ]; then
        name=$(echo "$i" | tr '[1-9]' '[a-k]')
    fi
    cp "template/$LANGUAGE/template.$LANGUAGE" "$CONTEST/$name.$LANGUAGE"
    cp "template/$LANGUAGE/Makefile" "$CONTEST/Makefile"
    touch "$CONTEST/$name""_input.txt"
    touch "$CONTEST/$name""_output.txt"
done
echo "Done"
