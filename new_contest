#!/bin/bash
# exit if any command failed
set -e

usage="$(basename "$0") [-h] -t title -n num -a <a|n> -l <cpp|go...>  -- create template for competition
    Each competition will be populate with:
        - [a-b].<language extensions inside a folder name <title>
        - [a-b]_input.txt file
        - [a-b]_output.txt file
        - Makefile a make file to compile/run test cases for each input:
            + Type: make <task-name> to run test cases from <task-name>_input.txt for that task

    -h  --help
        Show this help text.

    -t --title
        Title of the contest, used as folder name.

    -n --number
        The number of tasks for this competition.

    -a --affix
        The naming affix of task ( alphabetical | numerical ).

    -l --language
        Language to use in the competition, limited support only.
"

printusage()
{
    echo "$usage" >&2
}

TASK_COUNT=5
SUPPORTED_LANGUAGE=( $(ls -l "template/" | grep '^d' | awk '{ print $9 }') )

# echo "${SUPPORTED_LANGUAGE[@]}"


function check_all() {

    local in=1
    for lang in "${SUPPORTED_LANGUAGE[@]}"
    do
        if [ "$LANGUAGE" == "$lang" ]; then
            in=0
        fi
    done

    if [ "$in" -eq "1" ]; then
        printf "Unsupported language %s, must be one of %s\n" "$LANGUAGE" "$SUPPORTED_LANGUAGE" >&2
        exit 1
    fi

    if [ $AFFIX != 'a' ] && [ $AFFIX != 'n' ]; then
        AFFIX=n # default to numerical schema
    fi

    if [[ -z "$TITLE"  || "$TITLE" == "template" ]]; then
        printf "Invalid contest name %s\n" "$TITLE" >&2
        printusage
        exit 1
    fi

    if ! ((  $NUM > 0 )); then
        printf "Invalid task number -%s\n" "$NUM" >&2
        printusage
        exit 1
    fi


}

# getopts -l 'help,title:,number:,affix:,language:' -a -o 'ht:n:a:l:'

# getopt -l "name:,version::,verbose" -- "n:v::V" "--name=Karthik -version=5.2 -verbose"

# -o is for short options like -v
# -l is for long options with double dash like --version
# the comma separates different long options
# -a is for long options with single dash like -version
OPTS=`getopt -o ht:n:a:l: --long help,title:,number:,affix:,language: -- "$@"`


# set --:
# If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters
# are set to the arguments, even if some of them begin with a ‘-’.
eval set -- "$OPTS"

# while getopts 'ht:n:a:l:' option; do
while true; do
  case "$1" in

    -h|--help)
        printusage
        exit 0
        ;;


    -t|--title)
        TITLE="$2"
        shift 2
        ;;

    -n|--number)
        NUM="$2"
        shift 2
        ;;

    -a|--affix)
        AFFIX="$2"
        shift 2
        ;;

    -l|--language)
        LANGUAGE="$2"
        shift 2
        ;;

    *)
        break;;

    --)
        shift
        break;;

  esac
done

check_all

echo "1. Creating directory $TITLE"
mkdir "$TITLE"

echo "Done"

echo "2. Populating template for $LANGUAGE"

for ((i=1; i <= NUM ; i++)); do
    name="$i"
    if [ $AFFIX == "a" ]; then
        name=$(echo "$i" | tr '[1-9]' '[a-k]')
    fi
    cp "template/$LANGUAGE/template.$LANGUAGE" "$TITLE/$name.$LANGUAGE"
    cp "template/$LANGUAGE/Makefile" "$TITLE/Makefile"
    touch "$TITLE/$name""_input.txt"
    touch "$TITLE/$name""_output.txt"
done
echo "Done"
